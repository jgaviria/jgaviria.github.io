<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Juan's ruby blog</title><description>Things about ROR and such</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Wed, 16 Sep 2015 01:59:25 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Creating a background task with Rocketjob</title><description>&lt;p&gt;I've put together a little post to show you how to create a background task using Rocketjob.&lt;/p&gt;

&lt;p&gt;First, we will create a rails app and add Rocketjob. Then, we'll create a simple User model to hold our users. Users will have two attributes (name and age). Lastly, we'll create the&lt;/p&gt;</description><link>http://localhost:2368/adding-rocketjob-to-a-rails-app/</link><guid isPermaLink="false">2d2af3b0-4d8a-4bd5-9429-0e02b89b709d</guid><dc:creator>juan gaviria</dc:creator><pubDate>Tue, 15 Sep 2015 02:41:07 GMT</pubDate><content:encoded>&lt;p&gt;I've put together a little post to show you how to create a background task using Rocketjob.&lt;/p&gt;

&lt;p&gt;First, we will create a rails app and add Rocketjob. Then, we'll create a simple User model to hold our users. Users will have two attributes (name and age). Lastly, we'll create the background task which will get the input from a CSV file.&lt;/p&gt;

&lt;h3 id="installingrocketjob"&gt;Installing rocketjob:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; rails new myapp
 cd myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following to the bottom of your gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem 'rocketjob'
gem 'bson_ext', platform: :ruby
gem 'rails_semantic_logger'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate Mongo Configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; bundle exec rails generate mongo_mapper:config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should generate &lt;mark&gt;config/mongo.yml&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;If you are running &lt;mark&gt;Spring&lt;/mark&gt;, which is installed by default by Rails, stop the backgound spring processes to get them to reload:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/spring stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start a rocketjob worker process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rocketjob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should look like the following: &lt;br&gt;
&lt;img src="http://i58.tinypic.com/otm63p.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;h3 id="createusermodel"&gt;Create User model&lt;/h3&gt;

&lt;p&gt;Run the following scaffold for simplicity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/rails generate scaffold User name:string age:integer
bin/rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can create the background task to create users from the CSV input file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'CSV'

class UserJob &amp;lt; RocketJob::Job

  def perform(path)
    CSV.foreach(path, headers: true) do |row|
      User.create(name: row['name'], age: row['age'])
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before running the job, we need a CSV file containing some users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name, age
John Doe1, 20
John Doe2, 45
John Doe3, 60
John Doe4, 22
John Doe5, 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now from a rails console, we can run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UserJob.perform_later(path_to_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rocketjob server's output:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i61.tinypic.com/2e0p9wp.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;p&gt;Mission Control is the Web user interface to manage rocketjob jobs. If you decide to use it, this is how the UserJob would look like after processing successfully:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i58.tinypic.com/t50fpe.png" alt="RJMC sample view"&gt;&lt;/p&gt;

&lt;p&gt;In my next blog I will show how to add "Directory Monitoring". DirmonJob runs every 5 minutes by default, looking for new files that have appeared based on configured entries called DirmonEntry. These entries can be managed programmatically, or via rocketjob mission control, the web management interface for rocketjob.&lt;/p&gt;

&lt;h3 id="formoreinformation"&gt;For more information:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rocketjob Mission Control (RJMC). &lt;a href="http://rocketjob.io/mission_control"&gt;http://rocketjob.io/mission_control&lt;/a&gt; This is the UI for RocketJob.&lt;/li&gt;
&lt;li&gt;Rocketjob &lt;a href="http://rocketjob.io"&gt;http://rocketjob.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>